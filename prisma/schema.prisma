generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String                @id @default(cuid())
  name           String?
  email          String                @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  accounts       Account[]
  auditLogs      AuditLog[]
  documents      Document[]            @relation("DocumentAuthor")
  experiments    Experiment[]          @relation("ExperimentOwner")
  createdIdeas   Idea[]                @relation("IdeaCreator")
  interviews     Interview[]           @relation("InterviewConductor")
  kpis           KPI[]                 @relation("KPIOwner")
  checklistItems LaunchChecklistItem[]
  memberships    Membership[]
  ownedOKRs      OKR[]                 @relation("OKROwner")
  sessions       Session[]
  assignedTasks  Task[]                @relation("TaskAssignee")
  profile        UserProfile?

  @@index([email])
}

model UserProfile {
  id       String  @id @default(cuid())
  userId   String  @unique
  bio      String?
  title    String?
  timezone String?
  locale   String? @default("en")
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Organization {
  id          String       @id @default(cuid())
  name        String
  slug        String       @unique
  description String?
  domain      String?
  logo        String?
  website     String?
  settings    Json?        @default("{}")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  auditLogs   AuditLog[]
  invitations Invitation[]
  memberships Membership[]
  products    Product[]
  teams       Team[]
  webhooks    Webhook[]

  @@index([slug])
  @@index([deletedAt])
}

model Team {
  id             String       @id @default(cuid())
  name           String
  slug           String
  description    String?
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  members        Membership[]
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  products       Product[]    @relation("ProductToTeam")

  @@unique([organizationId, slug])
  @@index([organizationId])
  @@index([deletedAt])
}

model Membership {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  teamId         String?
  role           Role         @default(STAKEHOLDER)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  team           Team?        @relation(fields: [teamId], references: [id])
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([organizationId])
  @@index([teamId])
}

model Invitation {
  id             String           @id @default(cuid())
  email          String
  organizationId String
  teamId         String?
  role           Role             @default(STAKEHOLDER)
  status         InvitationStatus @default(PENDING)
  token          String           @unique
  expiresAt      DateTime
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([organizationId])
}

model Product {
  id             String         @id @default(cuid())
  name           String
  key            String         @unique
  description    String?
  vision         String?
  lifecycle      Lifecycle      @default(IDEATION)
  organizationId String
  settings       Json?          @default("{}")
  metrics        Json?          @default("{}")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  deletedAt      DateTime?
  announcements  Announcement[]
  changelogs     Changelog[]
  competitors    Competitor[]
  customers      Customer[]
  dependencies   Dependency[]
  documents      Document[]
  epics          Epic[]
  experiments    Experiment[]
  features       Feature[]
  flags          FeatureFlag[]
  feedback       Feedback[]
  ideas          Idea[]
  insights       Insight[]
  interviews     Interview[]
  kpis           KPI[]
  okrs           OKR[]
  personas       Persona[]
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  releases       Release[]
  risks          Risk[]
  roadmapItems   RoadmapItem[]
  sprints        Sprint[]
  sunsetPlan     SunsetPlan?
  tasks          Task[]
  teams          Team[]         @relation("ProductToTeam")

  @@index([key])
  @@index([organizationId])
  @@index([lifecycle])
  @@index([deletedAt])
}

model Idea {
  id                String     @id @default(cuid())
  title             String
  description       String
  problem           String?
  hypothesis        String?
  source            String?
  tags              String[]   @default([])
  votes             Int        @default(0)
  effortScore       Int?
  impactScore       Int?
  reachScore        Int?
  confidenceScore   Int?
  priority          Priority   @default(MEDIUM)
  status            IdeaStatus @default(SUBMITTED)
  productId         String
  creatorId         String
  assigneeId        String?
  convertedToEpicId String?
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  deletedAt         DateTime?
  convertedToEpic   Epic?      @relation("EpicFromIdea", fields: [convertedToEpicId], references: [id])
  creator           User       @relation("IdeaCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  product           Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  insights          Insight[]

  @@index([productId])
  @@index([creatorId])
  @@index([status])
  @@index([priority])
  @@index([deletedAt])
}

model Customer {
  id         String         @id @default(cuid())
  name       String
  email      String?
  company    String?
  segment    String?
  tier       CustomerTier   @default(INDIVIDUAL)
  status     CustomerStatus @default(ACTIVE)
  attributes Json?          @default("{}")
  productId  String
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  deletedAt  DateTime?
  product    Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  feedback   Feedback[]
  interviews Interview[]

  @@index([productId])
  @@index([segment])
  @@index([tier])
  @@index([deletedAt])
}

model Persona {
  id           String      @id @default(cuid())
  name         String
  description  String
  goals        String[]
  pains        String[]
  gains        String[]
  demographics Json?       @default("{}")
  behaviors    Json?       @default("{}")
  productId    String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  deletedAt    DateTime?
  interviews   Interview[]
  product      Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([deletedAt])
}

model Interview {
  id          String          @id @default(cuid())
  title       String
  description String?
  notes       String?
  transcript  String?
  attachments String[]        @default([])
  status      InterviewStatus @default(SCHEDULED)
  scheduledAt DateTime?
  conductedAt DateTime?
  productId   String
  customerId  String?
  personaId   String?
  conductorId String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  deletedAt   DateTime?
  insights    Insight[]
  conductor   User            @relation("InterviewConductor", fields: [conductorId], references: [id], onDelete: Cascade)
  customer    Customer?       @relation(fields: [customerId], references: [id])
  persona     Persona?        @relation(fields: [personaId], references: [id])
  product     Product         @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([customerId])
  @@index([personaId])
  @@index([conductorId])
  @@index([status])
  @@index([deletedAt])
}

model Competitor {
  id          String    @id @default(cuid())
  name        String
  description String?
  website     String?
  pricing     Json?     @default("{}")
  strengths   String[]
  weaknesses  String[]
  marketShare Float?
  attributes  Json?     @default("{}")
  productId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([deletedAt])
}

model Insight {
  id           String        @id @default(cuid())
  title        String
  description  String
  source       InsightSource
  confidence   Int           @default(3)
  impact       Impact        @default(MEDIUM)
  tags         String[]      @default([])
  productId    String
  ideaId       String?
  interviewId  String?
  experimentId String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
  experiment   Experiment?   @relation(fields: [experimentId], references: [id])
  idea         Idea?         @relation(fields: [ideaId], references: [id])
  interview    Interview?    @relation(fields: [interviewId], references: [id])
  product      Product       @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([source])
  @@index([impact])
  @@index([deletedAt])
}

model Epic {
  id                 String        @id @default(cuid())
  title              String
  description        String?
  goal               String?
  hypothesis         String?
  acceptanceCriteria String?
  priority           Priority      @default(MEDIUM)
  status             EpicStatus    @default(NEW)
  effort             Int?
  businessValue      Int?
  productId          String
  assigneeId         String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  deletedAt          DateTime?
  product            Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  features           Feature[]
  fromIdeas          Idea[]        @relation("EpicFromIdea")
  roadmapItems       RoadmapItem[]

  @@index([productId])
  @@index([status])
  @@index([priority])
  @@index([deletedAt])
}

model Feature {
  id                 String        @id @default(cuid())
  title              String
  description        String?
  specification      String?
  acceptanceCriteria String?
  priority           Priority      @default(MEDIUM)
  status             FeatureStatus @default(NEW)
  effort             Int?
  epicId             String?
  productId          String
  assigneeId         String?
  releaseId          String?
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  deletedAt          DateTime?
  dependencies       Dependency[]  @relation("FeatureDependencies")
  dependents         Dependency[]  @relation("FeatureDependents")
  epic               Epic?         @relation(fields: [epicId], references: [id])
  product            Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  release            Release?      @relation(fields: [releaseId], references: [id])
  flags              FeatureFlag[]
  tasks              Task[]

  @@index([productId])
  @@index([epicId])
  @@index([status])
  @@index([priority])
  @@index([releaseId])
  @@index([deletedAt])
}

model Task {
  id           String     @id @default(cuid())
  title        String
  description  String?
  type         TaskType   @default(STORY)
  priority     Priority   @default(MEDIUM)
  status       TaskStatus @default(NEW)
  effort       Int?
  timeEstimate Int?
  timeSpent    Int?
  featureId    String?
  productId    String
  assigneeId   String?
  sprintId     String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?
  assignee     User?      @relation("TaskAssignee", fields: [assigneeId], references: [id])
  feature      Feature?   @relation(fields: [featureId], references: [id])
  product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  sprint       Sprint?    @relation(fields: [sprintId], references: [id])

  @@index([productId])
  @@index([featureId])
  @@index([assigneeId])
  @@index([sprintId])
  @@index([status])
  @@index([priority])
  @@index([deletedAt])
}

model Sprint {
  id        String       @id @default(cuid())
  name      String
  goal      String?
  status    SprintStatus @default(PLANNED)
  startDate DateTime
  endDate   DateTime
  capacity  Int?
  velocity  Int?
  productId String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  deletedAt DateTime?
  product   Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  tasks     Task[]

  @@index([productId])
  @@index([status])
  @@index([startDate])
  @@index([deletedAt])
}

model OKR {
  id          String      @id @default(cuid())
  objective   String
  description String?
  quarter     String
  year        Int
  status      OKRStatus   @default(ACTIVE)
  progress    Float       @default(0.0)
  productId   String
  ownerId     String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?
  keyResults  KeyResult[]
  owner       User        @relation("OKROwner", fields: [ownerId], references: [id], onDelete: Cascade)
  product     Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([ownerId])
  @@index([quarter])
  @@index([year])
  @@index([status])
  @@index([deletedAt])
}

model KeyResult {
  id          String          @id @default(cuid())
  description String
  target      Float
  current     Float           @default(0.0)
  unit        String?
  type        KeyResultType   @default(INCREASE)
  status      KeyResultStatus @default(ACTIVE)
  okrId       String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  deletedAt   DateTime?
  okr         OKR             @relation(fields: [okrId], references: [id], onDelete: Cascade)

  @@index([okrId])
  @@index([status])
  @@index([deletedAt])
}

model RoadmapItem {
  id          String        @id @default(cuid())
  title       String
  description String?
  type        RoadmapType   @default(FEATURE)
  status      RoadmapStatus @default(PLANNED)
  lane        RoadmapLane   @default(LATER)
  quarter     String?
  startDate   DateTime?
  endDate     DateTime?
  effort      Int?
  confidence  Int?
  productId   String
  epicId      String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
  epic        Epic?         @relation(fields: [epicId], references: [id])
  product     Product       @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([epicId])
  @@index([lane])
  @@index([quarter])
  @@index([status])
  @@index([deletedAt])
}

model Release {
  id             String                @id @default(cuid())
  name           String
  version        String
  description    String?
  notes          String?
  status         ReleaseStatus         @default(PLANNED)
  type           ReleaseType           @default(MINOR)
  releaseDate    DateTime?
  artifacts      String[]              @default([])
  productId      String
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  deletedAt      DateTime?
  changelog      Changelog[]
  features       Feature[]
  checklistItems LaunchChecklistItem[]
  product        Product               @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([status])
  @@index([releaseDate])
  @@index([deletedAt])
}

model Changelog {
  id          String              @id @default(cuid())
  title       String
  description String
  type        ChangelogType       @default(FEATURE)
  visibility  ChangelogVisibility @default(PUBLIC)
  releaseId   String?
  productId   String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  deletedAt   DateTime?
  product     Product             @relation(fields: [productId], references: [id], onDelete: Cascade)
  release     Release?            @relation(fields: [releaseId], references: [id])

  @@index([productId])
  @@index([releaseId])
  @@index([type])
  @@index([visibility])
  @@index([deletedAt])
}

model LaunchChecklistItem {
  id          String                  @id @default(cuid())
  title       String
  description String?
  category    LaunchChecklistCategory @default(PREPARATION)
  isRequired  Boolean                 @default(false)
  isCompleted Boolean                 @default(false)
  releaseId   String
  assigneeId  String?
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  deletedAt   DateTime?
  assignee    User?                   @relation(fields: [assigneeId], references: [id])
  release     Release                 @relation(fields: [releaseId], references: [id], onDelete: Cascade)

  @@index([releaseId])
  @@index([assigneeId])
  @@index([category])
  @@index([isCompleted])
  @@index([dueDate])
  @@index([deletedAt])
}

model KPI {
  id           String    @id @default(cuid())
  name         String
  description  String?
  metric       String
  target       Float
  currentValue Float?    @default(0)
  unit         String?
  frequency    Frequency @default(MONTHLY)
  isActive     Boolean   @default(true)
  formula      String?
  source       String?
  category     String?
  productId    String
  ownerId      String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  owner        User?     @relation("KPIOwner", fields: [ownerId], references: [id])
  product      Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([ownerId])
  @@index([isActive])
  @@index([frequency])
  @@index([category])
  @@index([deletedAt])
}

model Experiment {
  id          String           @id @default(cuid())
  name        String
  description String?
  hypothesis  String
  type        ExperimentType   @default(AB_TEST)
  status      ExperimentStatus @default(DRAFT)
  audience    String?
  startDate   DateTime?
  endDate     DateTime?
  metrics     Json             @default("[]")
  variants    Json             @default("[]")
  results     String?
  conclusion  String?
  confidence  Float?
  productId   String
  ownerId     String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  deletedAt   DateTime?
  owner       User?            @relation("ExperimentOwner", fields: [ownerId], references: [id])
  product     Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  insights    Insight[]

  @@index([productId])
  @@index([ownerId])
  @@index([type])
  @@index([status])
  @@index([startDate])
  @@index([endDate])
  @@index([deletedAt])
}

model FeatureFlag {
  id          String    @id @default(cuid())
  name        String
  key         String    @unique
  description String?
  enabled     Boolean   @default(false)
  rollout     Float     @default(0.0)
  targeting   Json?     @default("{}")
  variants    Json?     @default("{}")
  productId   String
  featureId   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  feature     Feature?  @relation(fields: [featureId], references: [id])
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([key])
  @@index([productId])
  @@index([featureId])
  @@index([enabled])
  @@index([deletedAt])
}

model Risk {
  id          String     @id @default(cuid())
  title       String
  description String
  probability RiskLevel  @default(MEDIUM)
  impact      RiskLevel  @default(MEDIUM)
  mitigation  String?
  owner       String?
  status      RiskStatus @default(OPEN)
  dueDate     DateTime?
  productId   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  deletedAt   DateTime?
  product     Product    @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([status])
  @@index([probability])
  @@index([impact])
  @@index([deletedAt])
}

model Dependency {
  id          String           @id @default(cuid())
  title       String
  description String?
  type        DependencyType   @default(BLOCKS)
  status      DependencyStatus @default(PENDING)
  blockedById String
  blockingId  String
  productId   String
  resolvedAt  DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  deletedAt   DateTime?
  blockedBy   Feature          @relation("FeatureDependencies", fields: [blockedById], references: [id], onDelete: Cascade)
  blocking    Feature          @relation("FeatureDependents", fields: [blockingId], references: [id], onDelete: Cascade)
  product     Product          @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([blockedById])
  @@index([blockingId])
  @@index([status])
  @@index([deletedAt])
}

model Document {
  id        String         @id @default(cuid())
  title     String
  content   String
  type      DocumentType   @default(PRD)
  status    DocumentStatus @default(DRAFT)
  version   Int            @default(1)
  template  String?
  productId String
  authorId  String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  deletedAt DateTime?
  author    User           @relation("DocumentAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  product   Product        @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([authorId])
  @@index([type])
  @@index([status])
  @@index([deletedAt])
}

model Feedback {
  id          String         @id @default(cuid())
  title       String
  description String
  source      FeedbackSource @default(PORTAL)
  type        FeedbackType   @default(FEATURE_REQUEST)
  priority    Priority       @default(MEDIUM)
  status      FeedbackStatus @default(SUBMITTED)
  rating      Int?
  metadata    Json?          @default("{}")
  productId   String
  customerId  String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  deletedAt   DateTime?
  customer    Customer?      @relation(fields: [customerId], references: [id])
  product     Product        @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([customerId])
  @@index([source])
  @@index([type])
  @@index([status])
  @@index([deletedAt])
}

model Announcement {
  id          String               @id @default(cuid())
  title       String
  content     String
  type        AnnouncementType     @default(UPDATE)
  audience    AnnouncementAudience @default(INTERNAL)
  status      AnnouncementStatus   @default(DRAFT)
  publishedAt DateTime?
  expiresAt   DateTime?
  productId   String
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  deletedAt   DateTime?
  product     Product              @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([type])
  @@index([audience])
  @@index([status])
  @@index([publishedAt])
  @@index([deletedAt])
}

model SunsetPlan {
  id                String       @id @default(cuid())
  reason            String
  timeline          Json         @default("{}")
  migrationPath     String?
  retentionPolicy   String?
  communicationPlan String?
  eolDate           DateTime?
  eoslDate          DateTime?
  status            SunsetStatus @default(PLANNED)
  productId         String       @unique
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  deletedAt         DateTime?
  product           Product      @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([eolDate])
  @@index([deletedAt])
}

model AuditLog {
  id             String       @id @default(cuid())
  action         String
  entity         String
  entityId       String
  changes        Json?        @default("{}")
  metadata       Json?        @default("{}")
  userId         String?
  organizationId String
  ipAddress      String?
  userAgent      String?
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User?        @relation(fields: [userId], references: [id])

  @@index([entity, entityId])
  @@index([userId])
  @@index([organizationId])
  @@index([action])
  @@index([createdAt])
}

model Webhook {
  id             String       @id @default(cuid())
  name           String
  url            String
  secret         String?
  events         String[]     @default([])
  active         Boolean      @default(true)
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([active])
  @@index([deletedAt])
}

enum Role {
  ADMIN
  PRODUCT_MANAGER
  CONTRIBUTOR
  STAKEHOLDER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  REVOKED
}

enum Lifecycle {
  IDEATION
  DISCOVERY
  DEFINITION
  DELIVERY
  LAUNCH
  GROWTH
  MATURITY
  SUNSET
}

enum Priority {
  CRITICAL
  HIGH
  MEDIUM
  LOW
}

enum Impact {
  CRITICAL
  HIGH
  MEDIUM
  LOW
}

enum IdeaStatus {
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  CONVERTED
  ARCHIVED
}

enum CustomerTier {
  ENTERPRISE
  BUSINESS
  INDIVIDUAL
  FREE
}

enum CustomerStatus {
  ACTIVE
  INACTIVE
  CHURNED
  PROSPECT
}

enum InterviewStatus {
  SCHEDULED
  CONDUCTED
  CANCELLED
  NO_SHOW
}

enum InsightSource {
  INTERVIEW
  SURVEY
  ANALYTICS
  EXPERIMENT
  FEEDBACK
  OBSERVATION
}

enum EpicStatus {
  NEW
  IN_PROGRESS
  IN_REVIEW
  DONE
  CANCELLED
}

enum FeatureStatus {
  NEW
  IN_PROGRESS
  IN_REVIEW
  DONE
  CANCELLED
}

enum TaskType {
  STORY
  BUG
  TASK
  EPIC
  SPIKE
}

enum TaskStatus {
  NEW
  IN_PROGRESS
  IN_REVIEW
  DONE
  CANCELLED
}

enum SprintStatus {
  PLANNED
  ACTIVE
  COMPLETED
  CANCELLED
}

enum OKRStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  ARCHIVED
}

enum KeyResultType {
  INCREASE
  DECREASE
  MAINTAIN
  BINARY
}

enum KeyResultStatus {
  ACTIVE
  COMPLETED
  AT_RISK
  CANCELLED
}

enum Frequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum ExperimentType {
  AB_TEST
  MULTIVARIATE
  FEATURE_FLAG
  QUALITATIVE
}

enum ExperimentStatus {
  DRAFT
  RUNNING
  COMPLETED
  CANCELLED
  PAUSED
}

enum RoadmapType {
  EPIC
  FEATURE
  INITIATIVE
  MILESTONE
}

enum RoadmapStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum RoadmapLane {
  NOW
  NEXT
  LATER
  PARKED
}

enum ReleaseStatus {
  PLANNED
  IN_PROGRESS
  RELEASED
  CANCELLED
}

enum ReleaseType {
  MAJOR
  MINOR
  PATCH
  HOTFIX
}

enum ChangelogType {
  FEATURE
  IMPROVEMENT
  BUG_FIX
  BREAKING_CHANGE
  SECURITY
  DEPRECATED
}

enum ChangelogVisibility {
  PUBLIC
  PRIVATE
  INTERNAL
}

enum RiskLevel {
  CRITICAL
  HIGH
  MEDIUM
  LOW
}

enum RiskStatus {
  OPEN
  MITIGATED
  ACCEPTED
  CLOSED
}

enum DependencyType {
  BLOCKS
  BLOCKED_BY
  RELATED
}

enum DependencyStatus {
  PENDING
  RESOLVED
  CANCELLED
}

enum DocumentType {
  PRD
  RFC
  POST_MORTEM
  LAUNCH_PLAN
  SUNSET_PLAN
  TEMPLATE
  GUIDE
}

enum DocumentStatus {
  DRAFT
  REVIEW
  APPROVED
  PUBLISHED
  ARCHIVED
}

enum FeedbackSource {
  PORTAL
  EMAIL
  API
  CSV_IMPORT
  SURVEY
  INTERVIEW
}

enum FeedbackType {
  FEATURE_REQUEST
  BUG_REPORT
  IMPROVEMENT
  COMPLAINT
  COMPLIMENT
  QUESTION
}

enum FeedbackStatus {
  SUBMITTED
  UNDER_REVIEW
  PLANNED
  IN_PROGRESS
  COMPLETED
  REJECTED
  ARCHIVED
}

enum AnnouncementType {
  LAUNCH
  UPDATE
  MAINTENANCE
  DEPRECATION
  SUNSET
  GENERAL
}

enum AnnouncementAudience {
  INTERNAL
  EXTERNAL
  CUSTOMERS
  STAKEHOLDERS
  PUBLIC
}

enum AnnouncementStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  ARCHIVED
}

enum SunsetStatus {
  PLANNED
  ANNOUNCED
  IN_PROGRESS
  COMPLETED
}

enum LaunchChecklistCategory {
  PREPARATION
  TESTING
  DEPLOYMENT
  MONITORING
  COMMUNICATION
  ROLLBACK
}
