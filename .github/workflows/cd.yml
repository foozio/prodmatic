name: CD - Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '20'

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: https://prodmatic-staging.vercel.app
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npm run db:generate

      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
          NEXTAUTH_URL: ${{ secrets.STAGING_NEXTAUTH_URL }}
          NEXTAUTH_SECRET: ${{ secrets.STAGING_NEXTAUTH_SECRET }}

      - name: Run database migrations
        run: npm run db:migrate
        env:
          DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}

      - name: Deploy to Vercel Staging
        uses: amondnet/vercel-action@v25
        id: vercel-deploy
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-args: '--prebuilt --prod'
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_STAGING_PROJECT_ID }}

      - name: Run smoke tests on staging
        run: |
          echo "Running smoke tests on staging..."
          curl -f ${{ steps.vercel-deploy.outputs.preview-url }}/api/health || exit 1
          echo "Staging deployment successful!"

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: 'üöÄ Successfully deployed to staging: ${{ steps.vercel-deploy.outputs.preview-url }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://prodmatic.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npm run db:generate

      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          NEXTAUTH_URL: ${{ secrets.PRODUCTION_NEXTAUTH_URL }}
          NEXTAUTH_SECRET: ${{ secrets.PRODUCTION_NEXTAUTH_SECRET }}

      - name: Backup production database
        run: |
          echo "Creating database backup..."
          # Add your backup script here
          # pg_dump $DATABASE_URL > backup-$(date +%Y%m%d-%H%M%S).sql

      - name: Run database migrations
        run: npm run db:migrate
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}

      - name: Deploy to Vercel Production
        uses: amondnet/vercel-action@v25
        id: vercel-deploy
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-args: '--prebuilt --prod'
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PRODUCTION_PROJECT_ID }}

      - name: Run smoke tests on production
        run: |
          echo "Running smoke tests on production..."
          curl -f ${{ steps.vercel-deploy.outputs.preview-url }}/api/health || exit 1
          echo "Production deployment successful!"

      - name: Update Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          environment: production
          version: ${{ github.sha }}

      - name: Notify deployment success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#deployments'
          text: |
            üéâ Successfully deployed to production!
            üîó URL: ${{ steps.vercel-deploy.outputs.preview-url }}
            üìù Commit: ${{ github.sha }}
            üë§ Deployed by: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: failure() && needs.deploy-production.result == 'failure'
    needs: [deploy-production]
    environment:
      name: production-rollback
    
    steps:
      - name: Checkout previous successful commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Find previous successful deployment
        id: find-previous
        run: |
          # Find the previous successful commit (simplified)
          PREVIOUS_SHA=$(git log --oneline -n 10 --format="%H" | sed -n '2p')
          echo "previous-sha=$PREVIOUS_SHA" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build previous version
        run: npm run build
        env:
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          NEXTAUTH_URL: ${{ secrets.PRODUCTION_NEXTAUTH_URL }}
          NEXTAUTH_SECRET: ${{ secrets.PRODUCTION_NEXTAUTH_SECRET }}

      - name: Deploy rollback to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-args: '--prebuilt --prod'
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PRODUCTION_PROJECT_ID }}

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: warning
          channel: '#deployments'
          text: |
            ‚ö†Ô∏è Production rollback completed
            üìù Rolled back to: ${{ steps.find-previous.outputs.previous-sha }}
            üö® Original deployment failed, investigate immediately!
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  post-deploy:
    name: Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success()
    
    steps:
      - name: Warm up application
        run: |
          echo "Warming up application endpoints..."
          curl -s https://prodmatic.com/api/health
          curl -s https://prodmatic.com/
          echo "Application warmed up successfully!"

      - name: Run post-deployment checks
        run: |
          echo "Running post-deployment health checks..."
          # Add your health check scripts here
          # Check database connectivity, external integrations, etc.

      - name: Update status page
        run: |
          echo "Updating status page..."
          # Update your status page with deployment info

      - name: Generate deployment report
        run: |
          echo "Generating deployment report..."
          cat << EOF > deployment-report.md
          # Deployment Report
          
          **Date:** $(date)
          **Commit:** ${{ github.sha }}
          **Deployed by:** ${{ github.actor }}
          **Environment:** Production
          **Status:** ‚úÖ Success
          
          ## Changes
          $(git log --oneline -n 5)
          EOF

      - name: Upload deployment report
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report
          path: deployment-report.md